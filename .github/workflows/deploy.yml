name: Java CI/CD with Gradle

on:
  push:
    branches: ["main"]
  pull_request: {}

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.TOKEN }}

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without tests)
        run: ./gradlew build -x test

      - name: Start MySQL
        uses: samin/mysql-action@v1.3
        with:
          host port: 3305
          container port: 3305
          mysql database: ${{ secrets.MYSQL_DATABASE }}
          mysql user: ${{ secrets.MYSQL_USER }}
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

        ### CD
        # 배포를 위한 prod properties 설정
      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          touch application-prod.yml
          echo "${{ secrets.PROPERTIES_PROD }}" > application-prod.yml
        shell: bash

      - name: Make application-oauth.yml
        run: |
          cd ./src/main/resources
          touch application-oauth.yml
          echo "${{ secrets.PROPERTIES_OAUTH }}" > application-oauth.yml
        shell: bash
      
      - name: Build with Gradle (without tests) again
        run: ./gradlew build -x test

      - name: Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PW }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/server .
          docker push ${{ secrets.DOCKER_REPO }}/server

      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            docker stop server || true
            docker rm server || true
            docker pull ${{ secrets.DOCKER_REPO }}/server
            docker run -d --name server -p 5000:5000 ${{ secrets.DOCKER_REPO }}/server
            docker rmi -f $(docker images -f "dangling=true" -q)
