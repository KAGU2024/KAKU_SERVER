name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.TOKEN }}

      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          touch application-prod.yml
          echo "${{ secrets.PROPERTIES_PROD }}" > application-prod.yml
        shell: bash

      - name: Make application-oauth.yml
        run: |
          cd ./src/main/resources
          touch application-oauth.yml
          echo "${{ secrets.PROPERTIES_OAUTH }}" > application-oauth.yml
        shell: bash

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Docker 이미지 Build
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kagu .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PW }}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kagu

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/kagu

      - name: docker stop container
        run: |
          if [ $(sudo docker ps -a -q -f name=kagu) ]; then
            sudo docker stop kagu
          fi

      - name: docker run new container
        run: sudo docker run --rm -it -d -p 80:5000 --name kagu ${{ secrets.DOCKERHUB_USERNAME }}/kagu

      - name: delete old docker image
        run: sudo docker system prune -f